CREATE TABLE IF NOT EXISTS race_Entity (
    race_id TEXT NOT NULL PRIMARY KEY,
    season INTEGER NOT NULL,
    round INTEGER NOT NULL,
    url TEXT NOT NULL,
    race_name TEXT NOT NULL,
    circuit_id TEXT NOT NULL,
    date TEXT NOT NULL,
    time TEXT NOT NULL,
    timestamp REAL NOT NULL,
    FOREIGN KEY (circuit_id) REFERENCES circuit_Entity(circuit_id)
);

getRaceWithRaceId:
SELECT races.race_id AS race_id, races.season AS season, races.round AS round,
races.url AS url, races.race_name AS race_name, races.date AS date,
races.time AS time, races.timestamp AS timestamp, circuit.circuit_id AS circuit_id,
circuit.url AS circuit_url, circuit.circuit_name AS circuit_name,
circuit.country AS circuit_country, circuit.locality AS circuit_locality,
circuit.alt AS circuit_alt, circuit.lat AS circuit_lat,
circuit.long AS circuit_long, circuit.timestamp AS circuit_timestamp
FROM race_Entity races INNER JOIN circuit_Entity circuit ON races.circuit_id = circuit.circuit_id
WHERE race_id = :id;

getRaceWithSeason:
SELECT races.race_id AS race_id, races.season AS season, races.round AS round,
races.url AS url, races.race_name AS race_name, races.date AS date,
races.time AS time, races.timestamp AS timestamp, circuit.circuit_id AS circuit_id,
circuit.url AS circuit_url, circuit.circuit_name AS circuit_name,
circuit.country AS circuit_country, circuit.locality AS circuit_locality,
circuit.alt AS circuit_alt, circuit.lat AS circuit_lat,
circuit.long AS circuit_long, circuit.timestamp AS circuit_timestamp
FROM race_Entity races INNER JOIN circuit_Entity circuit ON races.circuit_id = circuit.circuit_id
WHERE season = :season ORDER BY races.round ASC;

getLatestRace:
SELECT races.race_id AS race_id, races.season AS season, races.round AS round,
races.url AS url, races.race_name AS race_name, races.date AS date,
races.time AS time, races.timestamp AS timestamp, circuit.circuit_id AS circuit_id,
circuit.url AS circuit_url, circuit.circuit_name AS circuit_name,
circuit.country AS circuit_country, circuit.locality AS circuit_locality,
circuit.alt AS circuit_alt, circuit.lat AS circuit_lat,
circuit.long AS circuit_long, circuit.timestamp AS circuit_timestamp
FROM race_Entity races INNER JOIN circuit_Entity circuit ON races.circuit_id = circuit.circuit_id
WHERE races.round = (
    SELECT MAX(races.round) FROM race_Entity races WHERE races.season = (
        SELECT MAX(races.season) FROM race_Entity races
    )
) AND races.season = (SELECT MAX(races.season) FROM race_Entity races);

getRacesFromCurrentSeason:
SELECT races.race_id AS race_id, races.season AS season, races.round AS round,
races.url AS url, races.race_name AS race_name, races.date AS date,
races.time AS time, races.timestamp AS timestamp, circuit.circuit_id AS circuit_id,
circuit.url AS circuit_url, circuit.circuit_name AS circuit_name,
circuit.country AS circuit_country, circuit.locality AS circuit_locality,
circuit.alt AS circuit_alt, circuit.lat AS circuit_lat,
circuit.long AS circuit_long, circuit.timestamp AS circuit_timestamp
FROM race_Entity races INNER JOIN circuit_Entity circuit ON races.circuit_id = circuit.circuit_id
WHERE races.season = (SELECT MAX(races.season) FROM race_Entity races) ORDER BY races.round ASC;

insertRace:
INSERT OR REPLACE
INTO race_Entity (
    race_id,
    season,
    round,
    url,
    race_name,
    circuit_id,
    date,
    time,
    timestamp
) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?);
