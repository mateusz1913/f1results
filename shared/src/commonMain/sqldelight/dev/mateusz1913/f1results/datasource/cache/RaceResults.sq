CREATE TABLE IF NOT EXISTS race_results_Entity (
    id TEXT NOT NULL PRIMARY KEY,
    race_id TEXT NOT NULL,
    driver_id TEXT NOT NULL,
    constructor_id TEXT NOT NULL,
    number TEXT DEFAULT NULL,
    position INTEGER NOT NULL,
    position_text TEXT NOT NULL,
    points TEXT DEFAULT NULL,
    grid TEXT NOT NULL,
    laps TEXT NOT NULL,
    status TEXT NOT NULL,
    time TEXT DEFAULT NULL,
    milliseconds TEXT DEFAULT NULL,
    fastest_lap TEXT DEFAULT NULL,
    rank TEXT DEFAULT NULL,
    fastest_lap_time TEXT DEFAULT NULL,
    fastest_lap_milliseconds TEXT DEFAULT NULL,
    fastest_lap_speed TEXT DEFAULT NULL,
    fastest_lap_speed_units TEXT DEFAULT NULL,
    timestamp REAL NOT NULL,
    FOREIGN KEY (race_id) REFERENCES race_Entity(race_id),
    FOREIGN KEY (driver_id) REFERENCES driver_Entity(driver_id),
    FOREIGN KEY (constructor_id) REFERENCES constructor_Entity(constructor_id)
);

getRaceResultsWithRaceId:
SELECT race_id,
driver.driver_id AS driver_id, driver.nationality AS driver_nationality,
driver.url AS driver_url, driver.date_of_birth AS driver_date_of_birth,
driver.family_name AS driver_family_name, driver.given_name AS driver_given_name,
driver.permanent_number AS driver_permanent_number, driver.code AS driver_code,
driver.timestamp AS driver_timestamp, constructor.constructor_id AS constructor_id,
constructor.url AS constructor_url, constructor.nationality AS constructor_nationality,
constructor.name AS constructor_name, constructor.timestamp AS constructor_timestamp,
number, position, position_text, points, grid, laps, status, results.time AS time, milliseconds,
fastest_lap, rank, fastest_lap_time, fastest_lap_milliseconds, fastest_lap_speed,
fastest_lap_speed_units, results.timestamp AS timestamp
FROM race_results_Entity results
INNER JOIN driver_Entity driver ON driver.driver_id = results.driver_id
INNER JOIN constructor_Entity constructor ON constructor.constructor_id = results.constructor_id
WHERE results.race_id = :id ORDER BY position ASC;

getLastRaceResults:
SELECT results.race_id AS race_id,
driver.driver_id AS driver_id, driver.nationality AS driver_nationality,
driver.url AS driver_url, driver.date_of_birth AS driver_date_of_birth,
driver.family_name AS driver_family_name, driver.given_name AS driver_given_name,
driver.permanent_number AS driver_permanent_number, driver.code AS driver_code,
driver.timestamp AS driver_timestamp, constructor.constructor_id AS constructor_id,
constructor.url AS constructor_url, constructor.nationality AS constructor_nationality,
constructor.name AS constructor_name, constructor.timestamp AS constructor_timestamp,
number, position, position_text, points, grid, laps, status, results.time AS time, milliseconds,
fastest_lap, rank, fastest_lap_time, fastest_lap_milliseconds, fastest_lap_speed,
fastest_lap_speed_units, results.timestamp AS timestamp
FROM race_results_Entity results
INNER JOIN race_Entity races ON races.race_id = results.race_id
INNER JOIN driver_Entity driver ON driver.driver_id = results.driver_id
INNER JOIN constructor_Entity constructor ON constructor.constructor_id = results.constructor_id
WHERE races.round = (
    SELECT MAX(races.round) FROM race_Entity races WHERE races.season = (
        SELECT MAX(races.season) FROM race_Entity races
    )
) AND races.season = (SELECT MAX(races.season) FROM race_Entity races)
ORDER BY position ASC;

getConstructorSeasonRaceResults:
SELECT results.race_id AS race_id,
driver.driver_id AS driver_id, driver.nationality AS driver_nationality,
driver.url AS driver_url, driver.date_of_birth AS driver_date_of_birth,
driver.family_name AS driver_family_name, driver.given_name AS driver_given_name,
driver.permanent_number AS driver_permanent_number, driver.code AS driver_code,
driver.timestamp AS driver_timestamp, constructor.constructor_id AS constructor_id,
constructor.url AS constructor_url, constructor.nationality AS constructor_nationality,
constructor.name AS constructor_name, constructor.timestamp AS constructor_timestamp,
number, position, position_text, points, grid, laps, status, results.time AS time, milliseconds,
fastest_lap, rank, fastest_lap_time, fastest_lap_milliseconds, fastest_lap_speed,
fastest_lap_speed_units, results.timestamp AS timestamp,
races.season AS races_season, races.round AS races_round,
races.url AS races_url, races.race_name AS races_race_name, races.date AS races_date,
races.time AS races_time, races.timestamp AS races_timestamp, circuit.circuit_id AS circuit_id,
circuit.url AS circuit_url, circuit.circuit_name AS circuit_name,
circuit.country AS circuit_country, circuit.locality AS circuit_locality,
circuit.alt AS circuit_alt, circuit.lat AS circuit_lat,
circuit.long AS circuit_long, circuit.timestamp AS circuit_timestamp
FROM race_results_Entity results
INNER JOIN race_Entity races ON races.race_id = results.race_id
INNER JOIN circuit_Entity circuit ON races.circuit_id = circuit.circuit_id
INNER JOIN driver_Entity driver ON driver.driver_id = results.driver_id
INNER JOIN constructor_Entity constructor ON constructor.constructor_id = results.constructor_id
WHERE constructor.constructor_id = :id AND races.season = :season
GROUP BY races.round, position
ORDER BY races.round ASC, position ASC;

getDriverSeasonRaceResults:
SELECT results.race_id AS race_id,
driver.driver_id AS driver_id, driver.nationality AS driver_nationality,
driver.url AS driver_url, driver.date_of_birth AS driver_date_of_birth,
driver.family_name AS driver_family_name, driver.given_name AS driver_given_name,
driver.permanent_number AS driver_permanent_number, driver.code AS driver_code,
driver.timestamp AS driver_timestamp, constructor.constructor_id AS constructor_id,
constructor.url AS constructor_url, constructor.nationality AS constructor_nationality,
constructor.name AS constructor_name, constructor.timestamp AS constructor_timestamp,
number, position, position_text, points, grid, laps, status, results.time AS time, milliseconds,
fastest_lap, rank, fastest_lap_time, fastest_lap_milliseconds, fastest_lap_speed,
fastest_lap_speed_units, results.timestamp AS timestamp
FROM race_results_Entity results
INNER JOIN race_Entity races ON races.race_id = results.race_id
INNER JOIN driver_Entity driver ON driver.driver_id = results.driver_id
INNER JOIN constructor_Entity constructor ON constructor.constructor_id = results.constructor_id
WHERE driver.driver_id = :id AND races.season = :season
ORDER BY races.round ASC, position ASC;

insertRaceResults:
INSERT OR REPLACE
INTO race_results_Entity (
    id,
    race_id,
    driver_id,
    constructor_id,
    number,
    position,
    position_text,
    points,
    grid,
    laps,
    status,
    time,
    milliseconds,
    fastest_lap,
    rank,
    fastest_lap_time,
    fastest_lap_milliseconds,
    fastest_lap_speed,
    fastest_lap_speed_units,
    timestamp
) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ? ,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);
